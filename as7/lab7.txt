lab7.txt
Will Baumbacher

1.
I start by getting a copy of the Diffutils repository from the file
~eggert/src/gnu/diffutils:
   $ git clone ~eggert/src/gnu/diffutils
  
2.
Now I get a log of the changes to the Diffutils' master branch:
   $ cd diffutils
   $ git log > git-log.txt

3.
I generate a list of tags:
   $ git tag > git-tags.txt

4.
Find the commit entitled “maint: quote 'like this' or "like this", not
`like this'”, and generate a patch for that commit:
   $ emacs git-log.txt
   C-s like this
I find the correct commit (62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f) and
create the patch:
   $ git format-patch -1 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f --stdout > quote-patch.txt

5.
Check out version 3.0 of Diffutils from your repository:
   $ git checkout v3.0

Note: switching to 'v3.0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 022cd5c version 3.0

6.
Apply quote-patch.txt to version 3.0:
   $ patch -p1 < quote-patch.txt
I get a message asking me what files to patch. I skip past those messages by
typing RETURN. 

7.
Use the git status command to get an overview of what happened:
   $ git status

HEAD detached at v3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   NEWS
	modified:   README
	modified:   TODO
	modified:   doc/diagmeet.note
	modified:   ms/config.bat
	modified:   ms/config.site
	modified:   po/en.po
	modified:   src/analyze.c
	modified:   src/cmp.c
	modified:   src/context.c
	modified:   src/diff.c
	modified:   src/diff.h
	modified:   src/diff3.c
	modified:   src/dir.c
	modified:   src/ifdef.c
	modified:   src/io.c
	modified:   src/sdiff.c
	modified:   src/side.c
	modified:   src/system.h
	modified:   src/util.c
	modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	NEWS.orig
	README-hacking.orig
	README-hacking.rej
	README.orig
	README.rej
	cfg.mk.orig
	cfg.mk.rej
	git-log.txt
	git-tags.txt
	ms/config.site.orig
	quote-patch.txt
	src/cmp.c.orig
	src/context.c.orig
	src/diff.c.orig
	src/diff.c.rej
	src/diff.h.orig
	src/diff3.c.orig
	src/diff3.c.rej
	src/dir.c.orig
	src/sdiff.c.orig
	src/system.h.orig
	src/util.c.orig
	tests/help-version.orig

no changes added to commit (use "git add" and/or "git commit -a")

8.
I learn how to use the Emacs function vc-diff and vc-revert.

C-x v =
Compare the work files in the current VC fileset with the versions you
started from (vc-diff). With a prefix argument, prompt for two revisions of the
current VC fileset and compare them. You can also call this command from a
Dired buffer 

C-x v u
Revert the work file(s) in the current VC fileset to the last revision
(vc-revert).

C-c C-a
Apply this hunk to its target file (diff-apply-hunk). With a prefix argument of C-u, revert
this hunk, i.e. apply the reverse of the hunk, which changes the “new” version into the “old”
version. If diff-jump-to-old-file is non-nil, apply the hunk to the “old” version of the file
instead. 

C-c C-c
Go to the source file and line corresponding to this hunk (diff-goto-source). By default,
this jumps to the “new” version of the file, the one shown first on the file header. With a
prefix argument, jump to the “old” version instead. If diff-jump-to-old-file is non-nil, this
command by default jumps to the “old” file, and the meaning of the prefix argument is
reversed. If the prefix argument is a number greater than 8 (e.g., if you type
C-u C-u C-c C-c), then this command also sets diff-jump-to-old-file for the next invocation. 

Within a file, you can use the vc-diff buffer which opens the diff file for the changes most
recently made. You can see every change to the updated file, and if you navigate to a
specific change in the vc-diff buffer you can revert the changes by using the diff-apply-hunk.
This allows you to change/revert some of a patch without undoing everything. You get to keep
the parts that you wanted. vc-revert will change all of the updates made by the patch.

9.
Revert all the changes to files other than .c files:
   $ git status
     	NEWS.orig
	README-hacking.orig
	README-hacking.rej
	README.orig
	README.rej
	cfg.mk.orig
	cfg.mk.rej
	git-log.txt
	git-tags.txt
	ms/config.site.orig
	quote-patch.txt
	src/cmp.c.orig
	src/context.c.orig
	src/diff.c.orig
	src/diff.c.rej
	src/diff.h.orig
	src/diff3.c.orig
	src/diff3.c.rej
	src/dir.c.orig
	src/sdiff.c.orig
	src/system.h.orig
	src/util.c.orig
	tests/help-version.orig
   $ emacs NEWS
     C-x v u
     yes
Reverting /u/eng/class/classwba/Documents/35l/as7/diffutils/NEWS...done
     C-x C-s (save)
     C-x C-c (exit)

Now I do this for the next file, README, and so on and so forth for every non .c file...
I check that I have reverted all the non .c files:
I reverted the following files:
  	modified:   NEWS
	modified:   README
	modified:   TODO
	modified:   doc/diagmeet.note
	modified:   ms/config.bat
	modified:   ms/config.site
	modified:   po/en.po
	modified:   tests/help-version
	
   $ git status
     	modified:   src/analyze.c
	modified:   src/cmp.c
	modified:   src/context.c
	modified:   src/diff.c
	modified:   src/diff.h
	modified:   src/diff3.c
	modified:   src/dir.c
	modified:   src/ifdef.c
	modified:   src/io.c
	modified:   src/sdiff.c
	modified:   src/side.c
	modified:   src/system.h
	modified:   src/util.c
These are all .c files meaning that I reverted all the correct files. 
Now I undo all the changes to the .c files other than the changes to character
string constants, as the character-string changes are the only changes that I
want:

I open src/analyze.c:
   $ emacs src/analyze.c
I open the git diff log:
   C-x v =
I go down the list of changes, and change back the changes that are not changes
to the actual code:
   C-u C-c C-a

I repeat this process for each of the .c files.

10.
Now I examine the files src/*.c.rej and copy rejected patches into the corresponding .c files:
I start by seeing which patches were rejected:
   $ ls src/*.c.rej
src/diff3.c.rej  src/diff.c.rej

I examine both of these files in emacs and manually make the necessary changes in the
corresponding .c files. These changes involve changing back ticks ` into apostrophes '.

11.
Now I remove all untracked files that git status warns about:
   $ git clean -f

12. 
Now I have the following files in my status:

modified:   src/cmp.c
modified:   src/diff.c
modified:   src/diff3.c
modified:   src/dir.c
modified:   src/sdiff.c
modified:   src/util.c
I check the length of the diff:
   $ git diff | wc -l
which outputs 335. I create the patch:
   $ git diff > quote-3.0-patch.txt

13.
Now I build the resulting modified version of Diffutils. I follow the instructions
in README-hacking
First I check my current version to see if I need to install the additional patch:
   $ gcc --version
gcc (GCC) 9.2.0
This is later than version 2.16 so I need to install the additional patch.
I copy and paste the patch into a file get-patch.txt
   $ ./bootstrap
   $ patch -p0 < get-patch.txt
   $ ./configure
   $ make
   $ make check

Now I check that Diffutils does the right thing with the “diff . -” scenario, as well
as with “diff --help”.
   $ ./src/diff . -
./src/diff: cannot compare '-' to a directory
   $ ./src/diff --help
This also verifies that Diffutils behaves properly.

14.
Do a sanity test using the modified version of Diffutils that you just built.
I check the old version of diffutils vs. the original.
I clone the original version into diffutils-3.0
   $ git clone ~eggert/src/gnu/diffutils diffutils-3.0

I rename the original diffutils-3.0-patch:
   $ mv diffutils diffutils-3.0-patch

I run my implementation of diff with the command “D/diff -pru diffutils-3.0
diffutils-3.0-patch >quote-3.0-test.txt”
   $ ./diffutils-3.0-patch/src/diff -pru diffutils-3.0 diffutils-3.0-patch
   > quote-3.0-test.txt

15.
I use diff to compare the contents of quote-3.0-test.txt and quote-3.0-patch.txt.
   $ diff quote-3.0-test.txt diffutils-3.0-patch/quote-3.0-patch.txt > diff.txt
   $ emacs diff.txt
   $ wc -l diff.txt
9454 diff.txt  

The diff.txt file is quite long, so I emacs into the file to check out the
differences. There are significant numbers of differences, but when looking many of
them appear to be trivial. For example the copy write changes:
-Copyright (C) 2001, 2006, 2009-2013, 2015-2017 Free Software Foundation, Inc.
+Copyright (C) 2001, 2006, 2009-2010 Free Software Foundation, Inc.

While the files are absolutely not identical, the differences between the two files
are not particularly significant.
