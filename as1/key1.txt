Exercise 1.1: Moving around in Emacs

C-s H T M L
C-s s c a v e n g e r
C-s s e l f - r e f e r e n t i a l
C-s a r r o w
C-e
C-a

Exercise 1.2: Deleting text in Emacs

e m a c s SP  e x c e r 1 . h t m l
M-x g o t o - l i n e ENTER 18 ENTER C-k C-k
C-s d e l e t e ENTER C-a C-k
C-s h t t p s : / / e ENTER C-a C-k C-k
C-s < ! ENTER C-a C-k C-k C-k C-k C-k C-k
C-s < ! ENTER C-a C-k C-k C-k C-k
C-s < ! ENTER C-a C-k

Exercise 1.3: Inserting text in Emacs

e m a c s SP e x e r 1 . h t m l ENTER
C-s a s s i g n m e n t SP 1 ENTER DELETE 4 2
C-s A s s i g n m e n t SP 1 M-% A s s i g n m e n t 4 2 ENTER y
C-s U T F - 8 M-% U S - A S C I I ENTER y
C-M-s [ ^ [ : a s c i i : ] ] ENTER C-a C-k
C-s < / o l > ENTER C-k ENTER
C-x C-s C-x C-c

Exercise 1.4: Other editing tasks in Emacs
c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l ENTER
e m a c s SP e x e r 4 . h t m l ENTER
C-x ] C-r < ! ENTER C-SP C-e M-w M-g M-g 4 4 3 ENTER C-y
C-x ] C-r < ! C-r ENTER C-SP C-e DOWN DOWN DOWN M-w M-g M-g 4 2 8 ENTER C-y
C-x ] C-r < ! C-r C-r C-r ENTER C-SP C-e DOWN DOWN M-w M-g M-g 3 8 3 ENTER C-y
C-x ] C-r < ! C-r C-r C-r C-r ENTER C-SP C-e M-w M-g M-g 1 2 9 ENTER C-y
C-x ] C-r < ! C-r C-r C-r C-r ENTER C-SP C-e M-w M-g M-g 1 8 ENTER C-Y 
C-x ] C-r < ! - - SP e n C-r ENTER DOWN C-SP C-x ] C-w
C-x u
C-x ] - - > C-r < ! - - SP e n C-r ENTER DOWN C-SP C-x ] M-x c o m m e n t - r e g i o n ENTER
C-x [ C-s < o l > M-% < o L > ENTER y y y y y y y
    There were 7 instances of <ol> that I replaced with <oL>

Exercise 1.5: Doing commands in Emacs
M-x m a k e - d i r e c t o r y ENTER j u n k ENTER
C-x C-f j u n k / h e l l o . c ENTER
M-x c o m p i l e ENTER g c c h e l l o . c ENTER
C-x b he l l o - o u t ENTER
M-! . / a . o u t ENTER
    Result: EOF on input

Exercise 1.6: Running Elisp code
C-x b ENTER
m o s t - n e g a t i v e - f i x n u m C-j
  Result: -2305843009213693952
m o s t - p o s i t i v e - f i x n u m C-j
  Result: 2305843009213693951
most-positive-fixnum and most-negative-fixnum are the closest things that emacs provides to positive and negative infinity.
( r a n d o m " 2 0 4 - 9 1 5 - 3 0 4 " ) C-j
  Result: 73038317205701051
( s e t SP q x SP ( r a n d o m ) ) C-j
  x =  399799282688100194
( s e t q SP y SP ( r a n d o m ) ) C-j
  y = 915197531417487738
p = ( * SP x SP y ) C-j
  p = 157120507926230708
( l o g a n d SP p SP m o s t - p o s i t i v e - f i x n u m ) C-j
  r = 157120507926230708
( * SP x SP y ) C-j
  The result is 157120507926230708, which is the same as r. 
While we are seeding variables x and y with a random number, the numbers are not truly random because the computer must run some program to pick a number. This program, however cleverly constructed still has a specific set of instructions for how to pick a number, so the integers x and y are not actually mathematically random.
The r value above will be incorrect when overflow occurs, and the probability of overflow occuring is based on the number of bits in the integer. In this case the integers are 16 bits, so the probability of r being incorrect is 2^(-16).
